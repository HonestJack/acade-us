
Projeto.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000946  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  00000946  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000946  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ec4  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000839  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006ee  00000000  00000000  00002105  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000027f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000526  00000000  00000000  000028ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059a  00000000  00000000  00002dd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000336c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
   c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  18:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  34:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_13>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  3c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  54:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  58:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  5c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  60:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
  64:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	98 02       	muls	r25, r24

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf ef       	ldi	r28, 0xFF	; 255
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a0 e0       	ldi	r26, 0x00	; 0
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 30       	cpi	r26, 0x03	; 3
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>

00000086 <__do_global_ctors>:
  86:	10 e0       	ldi	r17, 0x00	; 0
  88:	c5 e3       	ldi	r28, 0x35	; 53
  8a:	d0 e0       	ldi	r29, 0x00	; 0
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_global_ctors+0x10>
  8e:	21 97       	sbiw	r28, 0x01	; 1
  90:	fe 01       	movw	r30, r28
  92:	0e 94 4d 04 	call	0x89a	; 0x89a <__tablejump2__>
  96:	c4 33       	cpi	r28, 0x34	; 52
  98:	d1 07       	cpc	r29, r17
  9a:	c9 f7       	brne	.-14     	; 0x8e <__do_global_ctors+0x8>
  9c:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  a0:	0c 94 67 04 	jmp	0x8ce	; 0x8ce <_exit>

000000a4 <__bad_interrupt>:
  a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <__vector_13>:

static c_relogio relogio;
static c_lcd lcd;

ISR (TIMER1_OVF_vect) // Interrupção do timer responsável por contar os segundos
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
	TCNT1  = 3036;
  b6:	8c ed       	ldi	r24, 0xDC	; 220
  b8:	9b e0       	ldi	r25, 0x0B	; 11
  ba:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  be:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIFR1 |= (1 << 0); // Clear Flag
  c2:	b0 9a       	sbi	0x16, 0	; 22
	relogio.counter++;
  c4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZL7relogio>
  c8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_ZL7relogio+0x1>
  cc:	01 96       	adiw	r24, 0x01	; 1
  ce:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <_ZL7relogio+0x1>
  d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <_ZL7relogio>
}
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	0f 90       	pop	r0
  dc:	0f be       	out	0x3f, r0	; 63
  de:	0f 90       	pop	r0
  e0:	1f 90       	pop	r1
  e2:	18 95       	reti

000000e4 <_Z8timer_ust>:


void timer_us(unsigned short tempo){
  e4:	cf 92       	push	r12
  e6:	df 92       	push	r13
  e8:	ef 92       	push	r14
  ea:	ff 92       	push	r15
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
	unsigned short presc;
	TCCR0A = 2;        // Timer modo CTC
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	24 bd       	out	0x24, r18	; 36
	
	if (tempo <= 128)
  f4:	81 38       	cpi	r24, 0x81	; 129
  f6:	91 05       	cpc	r25, r1
  f8:	20 f4       	brcc	.+8      	; 0x102 <_Z8timer_ust+0x1e>
	{
		TCCR0B = 2;        // Prescaler 8
  fa:	25 bd       	out	0x25, r18	; 37
		presc = 8;
  fc:	c8 e0       	ldi	r28, 0x08	; 8
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	0d c0       	rjmp	.+26     	; 0x11c <_Z8timer_ust+0x38>
	}else if(tempo <= 1024)
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	24 e0       	ldi	r18, 0x04	; 4
 106:	92 07       	cpc	r25, r18
 108:	28 f4       	brcc	.+10     	; 0x114 <_Z8timer_ust+0x30>
	{
		TCCR0B = 3;        // Prescaler 64
 10a:	23 e0       	ldi	r18, 0x03	; 3
 10c:	25 bd       	out	0x25, r18	; 37
		presc = 64;
 10e:	c0 e4       	ldi	r28, 0x40	; 64
 110:	d0 e0       	ldi	r29, 0x00	; 0
 112:	04 c0       	rjmp	.+8      	; 0x11c <_Z8timer_ust+0x38>
	}else
	{
		TCCR0B = 4;        // Prescaler 256
 114:	24 e0       	ldi	r18, 0x04	; 4
 116:	25 bd       	out	0x25, r18	; 37
		presc = 256;
 118:	c0 e0       	ldi	r28, 0x00	; 0
 11a:	d1 e0       	ldi	r29, 0x01	; 1
	}
	
	TCNT0  = 0;                    // Zera o timer
 11c:	16 bc       	out	0x26, r1	; 38
	OCR0A =	tempo/(0.0625*presc);  // 1000u/(0.625u*presc)
 11e:	bc 01       	movw	r22, r24
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 3e 03 	call	0x67c	; 0x67c <__floatunsisf>
 128:	6b 01       	movw	r12, r22
 12a:	7c 01       	movw	r14, r24
 12c:	be 01       	movw	r22, r28
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 3e 03 	call	0x67c	; 0x67c <__floatunsisf>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e8       	ldi	r20, 0x80	; 128
 13c:	5d e3       	ldi	r21, 0x3D	; 61
 13e:	0e 94 cc 03 	call	0x798	; 0x798 <__mulsf3>
 142:	9b 01       	movw	r18, r22
 144:	ac 01       	movw	r20, r24
 146:	c7 01       	movw	r24, r14
 148:	b6 01       	movw	r22, r12
 14a:	0e 94 9d 02 	call	0x53a	; 0x53a <__divsf3>
 14e:	0e 94 0f 03 	call	0x61e	; 0x61e <__fixunssfsi>
 152:	67 bd       	out	0x27, r22	; 39
	TIFR0 |= (1 << 0);             // Clear Flag
 154:	a8 9a       	sbi	0x15, 0	; 21
	while(!(TIFR0 & (1 << 0)))
 156:	a8 9b       	sbis	0x15, 0	; 21
 158:	fe cf       	rjmp	.-4      	; 0x156 <_Z8timer_ust+0x72>
	{
		
	}
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	ff 90       	pop	r15
 160:	ef 90       	pop	r14
 162:	df 90       	pop	r13
 164:	cf 90       	pop	r12
 166:	08 95       	ret

00000168 <_ZN5c_lcd12init_displayEv>:
			timer_us(1640);
		}
	}
	void init_display(){
		
		PORTD &= ~(1 << 7); // RS = 0
 168:	5f 98       	cbi	0x0b, 7	; 11
		PORTB |=  (1 << 4); // E = 1
 16a:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	85 b9       	out	0x05, r24	; 5
		PORTB |= (0x02 & 0x0F);
 172:	29 9a       	sbi	0x05, 1	; 5
		PORTB &= ~(1 << 4); // E = 0
 174:	2c 98       	cbi	0x05, 4	; 5
		timer_us(40);
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 17e:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 180:	85 b1       	in	r24, 0x05	; 5
 182:	80 7f       	andi	r24, 0xF0	; 240
 184:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 186:	29 9a       	sbi	0x05, 1	; 5
		PORTB &= ~(1 << 4); // E = 0
 188:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 18a:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	80 7f       	andi	r24, 0xF0	; 240
 190:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 192:	2b 9a       	sbi	0x05, 3	; 5
		PORTB &= ~(1 << 4); // E = 0
 194:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
 196:	88 e2       	ldi	r24, 0x28	; 40
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 19e:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 1a0:	85 b1       	in	r24, 0x05	; 5
 1a2:	80 7f       	andi	r24, 0xF0	; 240
 1a4:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 1aa:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 1ac:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	80 7f       	andi	r24, 0xF0	; 240
 1b2:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 1b4:	85 b1       	in	r24, 0x05	; 5
 1b6:	86 60       	ori	r24, 0x06	; 6
 1b8:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 1ba:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
 1bc:	88 e2       	ldi	r24, 0x28	; 40
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 1c4:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 1c6:	85 b1       	in	r24, 0x05	; 5
 1c8:	80 7f       	andi	r24, 0xF0	; 240
 1ca:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 1cc:	85 b1       	in	r24, 0x05	; 5
 1ce:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 1d0:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 1d2:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 1d4:	85 b1       	in	r24, 0x05	; 5
 1d6:	80 7f       	andi	r24, 0xF0	; 240
 1d8:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 1da:	85 b1       	in	r24, 0x05	; 5
 1dc:	8c 60       	ori	r24, 0x0C	; 12
 1de:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 1e0:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
 1e2:	88 e2       	ldi	r24, 0x28	; 40
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 1ea:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 1ec:	85 b1       	in	r24, 0x05	; 5
 1ee:	80 7f       	andi	r24, 0xF0	; 240
 1f0:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 1f2:	28 9a       	sbi	0x05, 0	; 5
		PORTB &= ~(1 << 4); // E = 0
 1f4:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 1f6:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 1f8:	85 b1       	in	r24, 0x05	; 5
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 1fe:	85 b1       	in	r24, 0x05	; 5
 200:	87 60       	ori	r24, 0x07	; 7
 202:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 204:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
 206:	88 e2       	ldi	r24, 0x28	; 40
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 20e:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 210:	85 b1       	in	r24, 0x05	; 5
 212:	80 7f       	andi	r24, 0xF0	; 240
 214:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 216:	85 b1       	in	r24, 0x05	; 5
 218:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 21a:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 21c:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 21e:	85 b1       	in	r24, 0x05	; 5
 220:	80 7f       	andi	r24, 0xF0	; 240
 222:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 224:	28 9a       	sbi	0x05, 0	; 5
		PORTB &= ~(1 << 4); // E = 0
 226:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
			} else{
			timer_us(1640);
 228:	88 e6       	ldi	r24, 0x68	; 104
 22a:	96 e0       	ldi	r25, 0x06	; 6
 22c:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
 230:	08 95       	ret

00000232 <_Z4initv>:



void init()
{
	DDRB   = 0xFF;   // PB como saída
 232:	8f ef       	ldi	r24, 0xFF	; 255
 234:	84 b9       	out	0x04, r24	; 4
	DDRD   = 0xFF;   // PD como saída
 236:	8a b9       	out	0x0a, r24	; 10
	TCCR1A = 0;        // Timer modo CTC
 238:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = 4;        // Prescaler 256
 23c:	84 e0       	ldi	r24, 0x04	; 4
 23e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	TCNT1  = 3036;
 242:	8c ed       	ldi	r24, 0xDC	; 220
 244:	9b e0       	ldi	r25, 0x0B	; 11
 246:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 24a:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
//	OCR1A  = 62500;        //  1 000 000u/(0.0625u*presc)
	TIFR1 |= (1 << 0); // Clear Flag
 24e:	b0 9a       	sbi	0x16, 0	; 22
	TIMSK1 = (1 << 0); // Ativa interrupt do Timer1
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	sei();
 256:	78 94       	sei
 258:	08 95       	ret

0000025a <main>:

int main(void)
{
	unsigned int old_counter = 0;
	
	init();
 25a:	0e 94 19 01 	call	0x232	; 0x232 <_Z4initv>
	lcd.init_display();
 25e:	80 e0       	ldi	r24, 0x00	; 0
 260:	91 e0       	ldi	r25, 0x01	; 1
 262:	0e 94 b4 00 	call	0x168	; 0x168 <_ZN5c_lcd12init_displayEv>



int main(void)
{
	unsigned int old_counter = 0;
 266:	c0 e0       	ldi	r28, 0x00	; 0
 268:	d0 e0       	ldi	r29, 0x00	; 0
	{
		int aux_1, aux_2;
		
		lcd_function(CLEAR_DISPLAY);
		
		aux_1 = count/3600;
 26a:	0f 2e       	mov	r0, r31
 26c:	f0 e1       	ldi	r31, 0x10	; 16
 26e:	af 2e       	mov	r10, r31
 270:	fe e0       	ldi	r31, 0x0E	; 14
 272:	bf 2e       	mov	r11, r31
 274:	f0 2d       	mov	r31, r0
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
		print_char(aux_1 - 10*aux_2 + 48);
		print_char(':');
		count = count - 3600*aux_1;
 276:	0f 2e       	mov	r0, r31
 278:	f0 ef       	ldi	r31, 0xF0	; 240
 27a:	cf 2e       	mov	r12, r31
 27c:	f1 ef       	ldi	r31, 0xF1	; 241
 27e:	df 2e       	mov	r13, r31
 280:	f0 2d       	mov	r31, r0
		aux_1 = count/60;
 282:	0f 2e       	mov	r0, r31
 284:	fc e3       	ldi	r31, 0x3C	; 60
 286:	8f 2e       	mov	r8, r31
 288:	91 2c       	mov	r9, r1
 28a:	f0 2d       	mov	r31, r0
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
 28c:	0f 2e       	mov	r0, r31
 28e:	f8 e5       	ldi	r31, 0x58	; 88
 290:	6f 2e       	mov	r6, r31
 292:	f2 e0       	ldi	r31, 0x02	; 2
 294:	7f 2e       	mov	r7, r31
 296:	f0 2d       	mov	r31, r0
		print_char(aux_1 - 10*aux_2 + 48);
		print_char(':');
		aux_1 = count - 60*aux_1;
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
 298:	0f 2e       	mov	r0, r31
 29a:	fa e0       	ldi	r31, 0x0A	; 10
 29c:	4f 2e       	mov	r4, r31
 29e:	51 2c       	mov	r5, r1
 2a0:	f0 2d       	mov	r31, r0
	
	init();
	lcd.init_display();
    while (1) 
    {
		if (relogio.counter != old_counter)
 2a2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_ZL7relogio>
 2a6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_ZL7relogio+0x1>
 2aa:	8c 17       	cp	r24, r28
 2ac:	9d 07       	cpc	r25, r29
 2ae:	c9 f3       	breq	.-14     	; 0x2a2 <main+0x48>
		{
			old_counter = relogio.counter;
 2b0:	c0 91 01 01 	lds	r28, 0x0101	; 0x800101 <_ZL7relogio>
 2b4:	d0 91 02 01 	lds	r29, 0x0102	; 0x800102 <_ZL7relogio+0x1>
			lcd.print_hora(relogio.counter);
 2b8:	00 91 01 01 	lds	r16, 0x0101	; 0x800101 <_ZL7relogio>
 2bc:	10 91 02 01 	lds	r17, 0x0102	; 0x800102 <_ZL7relogio+0x1>
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 2c0:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 2c2:	85 b1       	in	r24, 0x05	; 5
 2c4:	80 7f       	andi	r24, 0xF0	; 240
 2c6:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 2c8:	85 b1       	in	r24, 0x05	; 5
 2ca:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 2cc:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 2ce:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 2d0:	85 b1       	in	r24, 0x05	; 5
 2d2:	80 7f       	andi	r24, 0xF0	; 240
 2d4:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 2d6:	28 9a       	sbi	0x05, 0	; 5
		PORTB &= ~(1 << 4); // E = 0
 2d8:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
			} else{
			timer_us(1640);
 2da:	88 e6       	ldi	r24, 0x68	; 104
 2dc:	96 e0       	ldi	r25, 0x06	; 6
 2de:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	{
		int aux_1, aux_2;
		
		lcd_function(CLEAR_DISPLAY);
		
		aux_1 = count/3600;
 2e2:	c8 01       	movw	r24, r16
 2e4:	b5 01       	movw	r22, r10
 2e6:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 2ea:	7b 01       	movw	r14, r22
		lcd_function(CLEAR_DISPLAY);
	}
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
 2ec:	5f 9a       	sbi	0x0b, 7	; 11
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 2ee:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 2f0:	85 b1       	in	r24, 0x05	; 5
 2f2:	80 7f       	andi	r24, 0xF0	; 240
 2f4:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 2f6:	85 b1       	in	r24, 0x05	; 5
 2f8:	83 60       	ori	r24, 0x03	; 3
 2fa:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 2fc:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 2fe:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 300:	85 b1       	in	r24, 0x05	; 5
 302:	80 7f       	andi	r24, 0xF0	; 240
 304:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 306:	85 b1       	in	r24, 0x05	; 5
 308:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 30a:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
 30c:	88 e2       	ldi	r24, 0x28	; 40
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
		lcd_function(ch);
		PORTD &= ~(1 << 7); // RS  = 0
 314:	5f 98       	cbi	0x0b, 7	; 11
		lcd_function(CLEAR_DISPLAY);
		
		aux_1 = count/3600;
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
		print_char(aux_1 - 10*aux_2 + 48);
 316:	80 e3       	ldi	r24, 0x30	; 48
 318:	8e 0d       	add	r24, r14
		lcd_function(CLEAR_DISPLAY);
	}
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
 31a:	5f 9a       	sbi	0x0b, 7	; 11
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 31c:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 31e:	95 b1       	in	r25, 0x05	; 5
 320:	90 7f       	andi	r25, 0xF0	; 240
 322:	95 b9       	out	0x05, r25	; 5
		PORTB |= ((function >> 4) & 0x0F);
 324:	95 b1       	in	r25, 0x05	; 5
 326:	28 2f       	mov	r18, r24
 328:	22 95       	swap	r18
 32a:	2f 70       	andi	r18, 0x0F	; 15
 32c:	92 2b       	or	r25, r18
 32e:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~(1 << 4); // E = 0
 330:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 332:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 334:	95 b1       	in	r25, 0x05	; 5
 336:	90 7f       	andi	r25, 0xF0	; 240
 338:	95 b9       	out	0x05, r25	; 5
		PORTB |= (function & 0x0F);
 33a:	95 b1       	in	r25, 0x05	; 5
 33c:	28 2f       	mov	r18, r24
 33e:	2f 70       	andi	r18, 0x0F	; 15
 340:	92 2b       	or	r25, r18
 342:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~(1 << 4); // E = 0
 344:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	29 f0       	breq	.+10     	; 0x354 <main+0xfa>
			timer_us(40);
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
 352:	04 c0       	rjmp	.+8      	; 0x35c <main+0x102>
			} else{
			timer_us(1640);
 354:	88 e6       	ldi	r24, 0x68	; 104
 356:	96 e0       	ldi	r25, 0x06	; 6
 358:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
		lcd_function(ch);
		PORTD &= ~(1 << 7); // RS  = 0
 35c:	5f 98       	cbi	0x0b, 7	; 11
		lcd_function(CLEAR_DISPLAY);
	}
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
 35e:	5f 9a       	sbi	0x0b, 7	; 11
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 360:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 362:	85 b1       	in	r24, 0x05	; 5
 364:	80 7f       	andi	r24, 0xF0	; 240
 366:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 368:	85 b1       	in	r24, 0x05	; 5
 36a:	83 60       	ori	r24, 0x03	; 3
 36c:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 36e:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 370:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 372:	85 b1       	in	r24, 0x05	; 5
 374:	80 7f       	andi	r24, 0xF0	; 240
 376:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 378:	85 b1       	in	r24, 0x05	; 5
 37a:	8a 60       	ori	r24, 0x0A	; 10
 37c:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 37e:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
 380:	88 e2       	ldi	r24, 0x28	; 40
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
		lcd_function(ch);
		PORTD &= ~(1 << 7); // RS  = 0
 388:	5f 98       	cbi	0x0b, 7	; 11
		aux_1 = count/3600;
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
		print_char(aux_1 - 10*aux_2 + 48);
		print_char(':');
		count = count - 3600*aux_1;
 38a:	ec 9c       	mul	r14, r12
 38c:	c0 01       	movw	r24, r0
 38e:	ed 9c       	mul	r14, r13
 390:	90 0d       	add	r25, r0
 392:	fc 9c       	mul	r15, r12
 394:	90 0d       	add	r25, r0
 396:	11 24       	eor	r1, r1
 398:	08 0f       	add	r16, r24
 39a:	19 1f       	adc	r17, r25
		aux_1 = count/60;
 39c:	c8 01       	movw	r24, r16
 39e:	b4 01       	movw	r22, r8
 3a0:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 3a4:	7b 01       	movw	r14, r22
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
 3a6:	c8 01       	movw	r24, r16
 3a8:	b3 01       	movw	r22, r6
 3aa:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 3ae:	36 2e       	mov	r3, r22
 3b0:	80 e3       	ldi	r24, 0x30	; 48
 3b2:	86 0f       	add	r24, r22
		lcd_function(CLEAR_DISPLAY);
	}
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
 3b4:	5f 9a       	sbi	0x0b, 7	; 11
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 3b6:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 3b8:	95 b1       	in	r25, 0x05	; 5
 3ba:	90 7f       	andi	r25, 0xF0	; 240
 3bc:	95 b9       	out	0x05, r25	; 5
		PORTB |= ((function >> 4) & 0x0F);
 3be:	95 b1       	in	r25, 0x05	; 5
 3c0:	28 2f       	mov	r18, r24
 3c2:	22 95       	swap	r18
 3c4:	2f 70       	andi	r18, 0x0F	; 15
 3c6:	92 2b       	or	r25, r18
 3c8:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~(1 << 4); // E = 0
 3ca:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 3cc:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 3ce:	95 b1       	in	r25, 0x05	; 5
 3d0:	90 7f       	andi	r25, 0xF0	; 240
 3d2:	95 b9       	out	0x05, r25	; 5
		PORTB |= (function & 0x0F);
 3d4:	95 b1       	in	r25, 0x05	; 5
 3d6:	28 2f       	mov	r18, r24
 3d8:	2f 70       	andi	r18, 0x0F	; 15
 3da:	92 2b       	or	r25, r18
 3dc:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~(1 << 4); // E = 0
 3de:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
 3e0:	81 30       	cpi	r24, 0x01	; 1
 3e2:	29 f0       	breq	.+10     	; 0x3ee <main+0x194>
			timer_us(40);
 3e4:	88 e2       	ldi	r24, 0x28	; 40
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
 3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <main+0x19c>
			} else{
			timer_us(1640);
 3ee:	88 e6       	ldi	r24, 0x68	; 104
 3f0:	96 e0       	ldi	r25, 0x06	; 6
 3f2:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
		lcd_function(ch);
		PORTD &= ~(1 << 7); // RS  = 0
 3f6:	5f 98       	cbi	0x0b, 7	; 11
		print_char(':');
		count = count - 3600*aux_1;
		aux_1 = count/60;
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
		print_char(aux_1 - 10*aux_2 + 48);
 3f8:	33 0c       	add	r3, r3
 3fa:	83 2d       	mov	r24, r3
 3fc:	88 0f       	add	r24, r24
 3fe:	88 0f       	add	r24, r24
 400:	38 0e       	add	r3, r24
 402:	80 e3       	ldi	r24, 0x30	; 48
 404:	8e 0d       	add	r24, r14
 406:	83 19       	sub	r24, r3
		lcd_function(CLEAR_DISPLAY);
	}
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
 408:	5f 9a       	sbi	0x0b, 7	; 11
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 40a:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 40c:	95 b1       	in	r25, 0x05	; 5
 40e:	90 7f       	andi	r25, 0xF0	; 240
 410:	95 b9       	out	0x05, r25	; 5
		PORTB |= ((function >> 4) & 0x0F);
 412:	95 b1       	in	r25, 0x05	; 5
 414:	28 2f       	mov	r18, r24
 416:	22 95       	swap	r18
 418:	2f 70       	andi	r18, 0x0F	; 15
 41a:	92 2b       	or	r25, r18
 41c:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~(1 << 4); // E = 0
 41e:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 420:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 422:	95 b1       	in	r25, 0x05	; 5
 424:	90 7f       	andi	r25, 0xF0	; 240
 426:	95 b9       	out	0x05, r25	; 5
		PORTB |= (function & 0x0F);
 428:	95 b1       	in	r25, 0x05	; 5
 42a:	28 2f       	mov	r18, r24
 42c:	2f 70       	andi	r18, 0x0F	; 15
 42e:	92 2b       	or	r25, r18
 430:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~(1 << 4); // E = 0
 432:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	29 f0       	breq	.+10     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			timer_us(40);
 438:	88 e2       	ldi	r24, 0x28	; 40
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
 440:	04 c0       	rjmp	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			} else{
			timer_us(1640);
 442:	88 e6       	ldi	r24, 0x68	; 104
 444:	96 e0       	ldi	r25, 0x06	; 6
 446:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
		lcd_function(ch);
		PORTD &= ~(1 << 7); // RS  = 0
 44a:	5f 98       	cbi	0x0b, 7	; 11
		lcd_function(CLEAR_DISPLAY);
	}
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
 44c:	5f 9a       	sbi	0x0b, 7	; 11
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 44e:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 450:	85 b1       	in	r24, 0x05	; 5
 452:	80 7f       	andi	r24, 0xF0	; 240
 454:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 456:	85 b1       	in	r24, 0x05	; 5
 458:	83 60       	ori	r24, 0x03	; 3
 45a:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 45c:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 45e:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 460:	85 b1       	in	r24, 0x05	; 5
 462:	80 7f       	andi	r24, 0xF0	; 240
 464:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 466:	85 b1       	in	r24, 0x05	; 5
 468:	8a 60       	ori	r24, 0x0A	; 10
 46a:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 46c:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
			timer_us(40);
 46e:	88 e2       	ldi	r24, 0x28	; 40
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
		lcd_function(ch);
		PORTD &= ~(1 << 7); // RS  = 0
 476:	5f 98       	cbi	0x0b, 7	; 11
		aux_1 = count/60;
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
		print_char(aux_1 - 10*aux_2 + 48);
		print_char(':');
		aux_1 = count - 60*aux_1;
 478:	44 ec       	ldi	r20, 0xC4	; 196
 47a:	97 01       	movw	r18, r14
 47c:	42 03       	mulsu	r20, r18
 47e:	c0 01       	movw	r24, r0
 480:	43 9f       	mul	r20, r19
 482:	90 0d       	add	r25, r0
 484:	11 24       	eor	r1, r1
 486:	08 0f       	add	r16, r24
 488:	19 1f       	adc	r17, r25
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
 48a:	c8 01       	movw	r24, r16
 48c:	b2 01       	movw	r22, r4
 48e:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 492:	f6 2e       	mov	r15, r22
 494:	80 e3       	ldi	r24, 0x30	; 48
 496:	86 0f       	add	r24, r22
		lcd_function(CLEAR_DISPLAY);
	}
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
 498:	5f 9a       	sbi	0x0b, 7	; 11
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 49a:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 49c:	95 b1       	in	r25, 0x05	; 5
 49e:	90 7f       	andi	r25, 0xF0	; 240
 4a0:	95 b9       	out	0x05, r25	; 5
		PORTB |= ((function >> 4) & 0x0F);
 4a2:	95 b1       	in	r25, 0x05	; 5
 4a4:	28 2f       	mov	r18, r24
 4a6:	22 95       	swap	r18
 4a8:	2f 70       	andi	r18, 0x0F	; 15
 4aa:	92 2b       	or	r25, r18
 4ac:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~(1 << 4); // E = 0
 4ae:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 4b0:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 4b2:	95 b1       	in	r25, 0x05	; 5
 4b4:	90 7f       	andi	r25, 0xF0	; 240
 4b6:	95 b9       	out	0x05, r25	; 5
		PORTB |= (function & 0x0F);
 4b8:	95 b1       	in	r25, 0x05	; 5
 4ba:	28 2f       	mov	r18, r24
 4bc:	2f 70       	andi	r18, 0x0F	; 15
 4be:	92 2b       	or	r25, r18
 4c0:	95 b9       	out	0x05, r25	; 5
		PORTB &= ~(1 << 4); // E = 0
 4c2:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
 4c4:	81 30       	cpi	r24, 0x01	; 1
 4c6:	29 f0       	breq	.+10     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
			timer_us(40);
 4c8:	88 e2       	ldi	r24, 0x28	; 40
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
 4d0:	04 c0       	rjmp	.+8      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
			} else{
			timer_us(1640);
 4d2:	88 e6       	ldi	r24, 0x68	; 104
 4d4:	96 e0       	ldi	r25, 0x06	; 6
 4d6:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
		lcd_function(ch);
		PORTD &= ~(1 << 7); // RS  = 0
 4da:	5f 98       	cbi	0x0b, 7	; 11
		print_char(aux_1 - 10*aux_2 + 48);
		print_char(':');
		aux_1 = count - 60*aux_1;
		aux_2 = aux_1/10;
		print_char(aux_2 + 48);
		print_char(aux_1 - 10*aux_2 + 48);
 4dc:	00 5d       	subi	r16, 0xD0	; 208
 4de:	ff 0c       	add	r15, r15
 4e0:	8f 2d       	mov	r24, r15
 4e2:	88 0f       	add	r24, r24
 4e4:	88 0f       	add	r24, r24
 4e6:	f8 0e       	add	r15, r24
 4e8:	0f 19       	sub	r16, r15
		lcd_function(CLEAR_DISPLAY);
	}
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
 4ea:	5f 9a       	sbi	0x0b, 7	; 11
{
	public:
	void lcd_function(char function){
		//P1 &= ~(1 << 3); // RS = 0
	
		PORTB |=  (1 << 4); // E = 1
 4ec:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 4ee:	85 b1       	in	r24, 0x05	; 5
 4f0:	80 7f       	andi	r24, 0xF0	; 240
 4f2:	85 b9       	out	0x05, r24	; 5
		PORTB |= ((function >> 4) & 0x0F);
 4f4:	85 b1       	in	r24, 0x05	; 5
 4f6:	90 2f       	mov	r25, r16
 4f8:	92 95       	swap	r25
 4fa:	9f 70       	andi	r25, 0x0F	; 15
 4fc:	89 2b       	or	r24, r25
 4fe:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 500:	2c 98       	cbi	0x05, 4	; 5
	
		PORTB |=  (1 << 4); // E = 1
 502:	2c 9a       	sbi	0x05, 4	; 5
		PORTB &= 0xF0;
 504:	85 b1       	in	r24, 0x05	; 5
 506:	80 7f       	andi	r24, 0xF0	; 240
 508:	85 b9       	out	0x05, r24	; 5
		PORTB |= (function & 0x0F);
 50a:	85 b1       	in	r24, 0x05	; 5
 50c:	90 2f       	mov	r25, r16
 50e:	9f 70       	andi	r25, 0x0F	; 15
 510:	89 2b       	or	r24, r25
 512:	85 b9       	out	0x05, r24	; 5
		PORTB &= ~(1 << 4); // E = 0
 514:	2c 98       	cbi	0x05, 4	; 5
	
		if(function != CLEAR_DISPLAY){
 516:	01 30       	cpi	r16, 0x01	; 1
 518:	29 f0       	breq	.+10     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
			timer_us(40);
 51a:	88 e2       	ldi	r24, 0x28	; 40
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
 522:	04 c0       	rjmp	.+8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
			} else{
			timer_us(1640);
 524:	88 e6       	ldi	r24, 0x68	; 104
 526:	96 e0       	ldi	r25, 0x06	; 6
 528:	0e 94 72 00 	call	0xe4	; 0xe4 <_Z8timer_ust>
	
	void print_char(char ch)
	{
		PORTD |=  (1 << 7); // RS  = 1
		lcd_function(ch);
		PORTD &= ~(1 << 7); // RS  = 0
 52c:	5f 98       	cbi	0x0b, 7	; 11
 52e:	b9 ce       	rjmp	.-654    	; 0x2a2 <main+0x48>

00000530 <_GLOBAL__sub_I__Z18convert_int2stringi>:
		print_char(aux_1 - 10*aux_2 + 48);
	}
	
};

class c_relogio
 530:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_ZL7relogio+0x1>
 534:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_ZL7relogio>
 538:	08 95       	ret

0000053a <__divsf3>:
 53a:	0e 94 b1 02 	call	0x562	; 0x562 <__divsf3x>
 53e:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_round>
 542:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_pscB>
 546:	58 f0       	brcs	.+22     	; 0x55e <__divsf3+0x24>
 548:	0e 94 84 03 	call	0x708	; 0x708 <__fp_pscA>
 54c:	40 f0       	brcs	.+16     	; 0x55e <__divsf3+0x24>
 54e:	29 f4       	brne	.+10     	; 0x55a <__divsf3+0x20>
 550:	5f 3f       	cpi	r21, 0xFF	; 255
 552:	29 f0       	breq	.+10     	; 0x55e <__divsf3+0x24>
 554:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>
 558:	51 11       	cpse	r21, r1
 55a:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_szero>
 55e:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_nan>

00000562 <__divsf3x>:
 562:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_split3>
 566:	68 f3       	brcs	.-38     	; 0x542 <__divsf3+0x8>

00000568 <__divsf3_pse>:
 568:	99 23       	and	r25, r25
 56a:	b1 f3       	breq	.-20     	; 0x558 <__divsf3+0x1e>
 56c:	55 23       	and	r21, r21
 56e:	91 f3       	breq	.-28     	; 0x554 <__divsf3+0x1a>
 570:	95 1b       	sub	r25, r21
 572:	55 0b       	sbc	r21, r21
 574:	bb 27       	eor	r27, r27
 576:	aa 27       	eor	r26, r26
 578:	62 17       	cp	r22, r18
 57a:	73 07       	cpc	r23, r19
 57c:	84 07       	cpc	r24, r20
 57e:	38 f0       	brcs	.+14     	; 0x58e <__divsf3_pse+0x26>
 580:	9f 5f       	subi	r25, 0xFF	; 255
 582:	5f 4f       	sbci	r21, 0xFF	; 255
 584:	22 0f       	add	r18, r18
 586:	33 1f       	adc	r19, r19
 588:	44 1f       	adc	r20, r20
 58a:	aa 1f       	adc	r26, r26
 58c:	a9 f3       	breq	.-22     	; 0x578 <__divsf3_pse+0x10>
 58e:	35 d0       	rcall	.+106    	; 0x5fa <__divsf3_pse+0x92>
 590:	0e 2e       	mov	r0, r30
 592:	3a f0       	brmi	.+14     	; 0x5a2 <__divsf3_pse+0x3a>
 594:	e0 e8       	ldi	r30, 0x80	; 128
 596:	32 d0       	rcall	.+100    	; 0x5fc <__divsf3_pse+0x94>
 598:	91 50       	subi	r25, 0x01	; 1
 59a:	50 40       	sbci	r21, 0x00	; 0
 59c:	e6 95       	lsr	r30
 59e:	00 1c       	adc	r0, r0
 5a0:	ca f7       	brpl	.-14     	; 0x594 <__divsf3_pse+0x2c>
 5a2:	2b d0       	rcall	.+86     	; 0x5fa <__divsf3_pse+0x92>
 5a4:	fe 2f       	mov	r31, r30
 5a6:	29 d0       	rcall	.+82     	; 0x5fa <__divsf3_pse+0x92>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	bb 1f       	adc	r27, r27
 5b0:	26 17       	cp	r18, r22
 5b2:	37 07       	cpc	r19, r23
 5b4:	48 07       	cpc	r20, r24
 5b6:	ab 07       	cpc	r26, r27
 5b8:	b0 e8       	ldi	r27, 0x80	; 128
 5ba:	09 f0       	breq	.+2      	; 0x5be <__divsf3_pse+0x56>
 5bc:	bb 0b       	sbc	r27, r27
 5be:	80 2d       	mov	r24, r0
 5c0:	bf 01       	movw	r22, r30
 5c2:	ff 27       	eor	r31, r31
 5c4:	93 58       	subi	r25, 0x83	; 131
 5c6:	5f 4f       	sbci	r21, 0xFF	; 255
 5c8:	3a f0       	brmi	.+14     	; 0x5d8 <__divsf3_pse+0x70>
 5ca:	9e 3f       	cpi	r25, 0xFE	; 254
 5cc:	51 05       	cpc	r21, r1
 5ce:	78 f0       	brcs	.+30     	; 0x5ee <__divsf3_pse+0x86>
 5d0:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>
 5d4:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_szero>
 5d8:	5f 3f       	cpi	r21, 0xFF	; 255
 5da:	e4 f3       	brlt	.-8      	; 0x5d4 <__divsf3_pse+0x6c>
 5dc:	98 3e       	cpi	r25, 0xE8	; 232
 5de:	d4 f3       	brlt	.-12     	; 0x5d4 <__divsf3_pse+0x6c>
 5e0:	86 95       	lsr	r24
 5e2:	77 95       	ror	r23
 5e4:	67 95       	ror	r22
 5e6:	b7 95       	ror	r27
 5e8:	f7 95       	ror	r31
 5ea:	9f 5f       	subi	r25, 0xFF	; 255
 5ec:	c9 f7       	brne	.-14     	; 0x5e0 <__divsf3_pse+0x78>
 5ee:	88 0f       	add	r24, r24
 5f0:	91 1d       	adc	r25, r1
 5f2:	96 95       	lsr	r25
 5f4:	87 95       	ror	r24
 5f6:	97 f9       	bld	r25, 7
 5f8:	08 95       	ret
 5fa:	e1 e0       	ldi	r30, 0x01	; 1
 5fc:	66 0f       	add	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	bb 1f       	adc	r27, r27
 604:	62 17       	cp	r22, r18
 606:	73 07       	cpc	r23, r19
 608:	84 07       	cpc	r24, r20
 60a:	ba 07       	cpc	r27, r26
 60c:	20 f0       	brcs	.+8      	; 0x616 <__divsf3_pse+0xae>
 60e:	62 1b       	sub	r22, r18
 610:	73 0b       	sbc	r23, r19
 612:	84 0b       	sbc	r24, r20
 614:	ba 0b       	sbc	r27, r26
 616:	ee 1f       	adc	r30, r30
 618:	88 f7       	brcc	.-30     	; 0x5fc <__divsf3_pse+0x94>
 61a:	e0 95       	com	r30
 61c:	08 95       	ret

0000061e <__fixunssfsi>:
 61e:	0e 94 ab 03 	call	0x756	; 0x756 <__fp_splitA>
 622:	88 f0       	brcs	.+34     	; 0x646 <__fixunssfsi+0x28>
 624:	9f 57       	subi	r25, 0x7F	; 127
 626:	98 f0       	brcs	.+38     	; 0x64e <__fixunssfsi+0x30>
 628:	b9 2f       	mov	r27, r25
 62a:	99 27       	eor	r25, r25
 62c:	b7 51       	subi	r27, 0x17	; 23
 62e:	b0 f0       	brcs	.+44     	; 0x65c <__fixunssfsi+0x3e>
 630:	e1 f0       	breq	.+56     	; 0x66a <__fixunssfsi+0x4c>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	88 1f       	adc	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	1a f0       	brmi	.+6      	; 0x642 <__fixunssfsi+0x24>
 63c:	ba 95       	dec	r27
 63e:	c9 f7       	brne	.-14     	; 0x632 <__fixunssfsi+0x14>
 640:	14 c0       	rjmp	.+40     	; 0x66a <__fixunssfsi+0x4c>
 642:	b1 30       	cpi	r27, 0x01	; 1
 644:	91 f0       	breq	.+36     	; 0x66a <__fixunssfsi+0x4c>
 646:	0e 94 c5 03 	call	0x78a	; 0x78a <__fp_zero>
 64a:	b1 e0       	ldi	r27, 0x01	; 1
 64c:	08 95       	ret
 64e:	0c 94 c5 03 	jmp	0x78a	; 0x78a <__fp_zero>
 652:	67 2f       	mov	r22, r23
 654:	78 2f       	mov	r23, r24
 656:	88 27       	eor	r24, r24
 658:	b8 5f       	subi	r27, 0xF8	; 248
 65a:	39 f0       	breq	.+14     	; 0x66a <__fixunssfsi+0x4c>
 65c:	b9 3f       	cpi	r27, 0xF9	; 249
 65e:	cc f3       	brlt	.-14     	; 0x652 <__fixunssfsi+0x34>
 660:	86 95       	lsr	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b3 95       	inc	r27
 668:	d9 f7       	brne	.-10     	; 0x660 <__fixunssfsi+0x42>
 66a:	3e f4       	brtc	.+14     	; 0x67a <__fixunssfsi+0x5c>
 66c:	90 95       	com	r25
 66e:	80 95       	com	r24
 670:	70 95       	com	r23
 672:	61 95       	neg	r22
 674:	7f 4f       	sbci	r23, 0xFF	; 255
 676:	8f 4f       	sbci	r24, 0xFF	; 255
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__floatunsisf>:
 67c:	e8 94       	clt
 67e:	09 c0       	rjmp	.+18     	; 0x692 <__floatsisf+0x12>

00000680 <__floatsisf>:
 680:	97 fb       	bst	r25, 7
 682:	3e f4       	brtc	.+14     	; 0x692 <__floatsisf+0x12>
 684:	90 95       	com	r25
 686:	80 95       	com	r24
 688:	70 95       	com	r23
 68a:	61 95       	neg	r22
 68c:	7f 4f       	sbci	r23, 0xFF	; 255
 68e:	8f 4f       	sbci	r24, 0xFF	; 255
 690:	9f 4f       	sbci	r25, 0xFF	; 255
 692:	99 23       	and	r25, r25
 694:	a9 f0       	breq	.+42     	; 0x6c0 <__floatsisf+0x40>
 696:	f9 2f       	mov	r31, r25
 698:	96 e9       	ldi	r25, 0x96	; 150
 69a:	bb 27       	eor	r27, r27
 69c:	93 95       	inc	r25
 69e:	f6 95       	lsr	r31
 6a0:	87 95       	ror	r24
 6a2:	77 95       	ror	r23
 6a4:	67 95       	ror	r22
 6a6:	b7 95       	ror	r27
 6a8:	f1 11       	cpse	r31, r1
 6aa:	f8 cf       	rjmp	.-16     	; 0x69c <__floatsisf+0x1c>
 6ac:	fa f4       	brpl	.+62     	; 0x6ec <__floatsisf+0x6c>
 6ae:	bb 0f       	add	r27, r27
 6b0:	11 f4       	brne	.+4      	; 0x6b6 <__floatsisf+0x36>
 6b2:	60 ff       	sbrs	r22, 0
 6b4:	1b c0       	rjmp	.+54     	; 0x6ec <__floatsisf+0x6c>
 6b6:	6f 5f       	subi	r22, 0xFF	; 255
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	8f 4f       	sbci	r24, 0xFF	; 255
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	16 c0       	rjmp	.+44     	; 0x6ec <__floatsisf+0x6c>
 6c0:	88 23       	and	r24, r24
 6c2:	11 f0       	breq	.+4      	; 0x6c8 <__floatsisf+0x48>
 6c4:	96 e9       	ldi	r25, 0x96	; 150
 6c6:	11 c0       	rjmp	.+34     	; 0x6ea <__floatsisf+0x6a>
 6c8:	77 23       	and	r23, r23
 6ca:	21 f0       	breq	.+8      	; 0x6d4 <__floatsisf+0x54>
 6cc:	9e e8       	ldi	r25, 0x8E	; 142
 6ce:	87 2f       	mov	r24, r23
 6d0:	76 2f       	mov	r23, r22
 6d2:	05 c0       	rjmp	.+10     	; 0x6de <__floatsisf+0x5e>
 6d4:	66 23       	and	r22, r22
 6d6:	71 f0       	breq	.+28     	; 0x6f4 <__floatsisf+0x74>
 6d8:	96 e8       	ldi	r25, 0x86	; 134
 6da:	86 2f       	mov	r24, r22
 6dc:	70 e0       	ldi	r23, 0x00	; 0
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	2a f0       	brmi	.+10     	; 0x6ec <__floatsisf+0x6c>
 6e2:	9a 95       	dec	r25
 6e4:	66 0f       	add	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	da f7       	brpl	.-10     	; 0x6e2 <__floatsisf+0x62>
 6ec:	88 0f       	add	r24, r24
 6ee:	96 95       	lsr	r25
 6f0:	87 95       	ror	r24
 6f2:	97 f9       	bld	r25, 7
 6f4:	08 95       	ret

000006f6 <__fp_inf>:
 6f6:	97 f9       	bld	r25, 7
 6f8:	9f 67       	ori	r25, 0x7F	; 127
 6fa:	80 e8       	ldi	r24, 0x80	; 128
 6fc:	70 e0       	ldi	r23, 0x00	; 0
 6fe:	60 e0       	ldi	r22, 0x00	; 0
 700:	08 95       	ret

00000702 <__fp_nan>:
 702:	9f ef       	ldi	r25, 0xFF	; 255
 704:	80 ec       	ldi	r24, 0xC0	; 192
 706:	08 95       	ret

00000708 <__fp_pscA>:
 708:	00 24       	eor	r0, r0
 70a:	0a 94       	dec	r0
 70c:	16 16       	cp	r1, r22
 70e:	17 06       	cpc	r1, r23
 710:	18 06       	cpc	r1, r24
 712:	09 06       	cpc	r0, r25
 714:	08 95       	ret

00000716 <__fp_pscB>:
 716:	00 24       	eor	r0, r0
 718:	0a 94       	dec	r0
 71a:	12 16       	cp	r1, r18
 71c:	13 06       	cpc	r1, r19
 71e:	14 06       	cpc	r1, r20
 720:	05 06       	cpc	r0, r21
 722:	08 95       	ret

00000724 <__fp_round>:
 724:	09 2e       	mov	r0, r25
 726:	03 94       	inc	r0
 728:	00 0c       	add	r0, r0
 72a:	11 f4       	brne	.+4      	; 0x730 <__fp_round+0xc>
 72c:	88 23       	and	r24, r24
 72e:	52 f0       	brmi	.+20     	; 0x744 <__fp_round+0x20>
 730:	bb 0f       	add	r27, r27
 732:	40 f4       	brcc	.+16     	; 0x744 <__fp_round+0x20>
 734:	bf 2b       	or	r27, r31
 736:	11 f4       	brne	.+4      	; 0x73c <__fp_round+0x18>
 738:	60 ff       	sbrs	r22, 0
 73a:	04 c0       	rjmp	.+8      	; 0x744 <__fp_round+0x20>
 73c:	6f 5f       	subi	r22, 0xFF	; 255
 73e:	7f 4f       	sbci	r23, 0xFF	; 255
 740:	8f 4f       	sbci	r24, 0xFF	; 255
 742:	9f 4f       	sbci	r25, 0xFF	; 255
 744:	08 95       	ret

00000746 <__fp_split3>:
 746:	57 fd       	sbrc	r21, 7
 748:	90 58       	subi	r25, 0x80	; 128
 74a:	44 0f       	add	r20, r20
 74c:	55 1f       	adc	r21, r21
 74e:	59 f0       	breq	.+22     	; 0x766 <__fp_splitA+0x10>
 750:	5f 3f       	cpi	r21, 0xFF	; 255
 752:	71 f0       	breq	.+28     	; 0x770 <__fp_splitA+0x1a>
 754:	47 95       	ror	r20

00000756 <__fp_splitA>:
 756:	88 0f       	add	r24, r24
 758:	97 fb       	bst	r25, 7
 75a:	99 1f       	adc	r25, r25
 75c:	61 f0       	breq	.+24     	; 0x776 <__fp_splitA+0x20>
 75e:	9f 3f       	cpi	r25, 0xFF	; 255
 760:	79 f0       	breq	.+30     	; 0x780 <__fp_splitA+0x2a>
 762:	87 95       	ror	r24
 764:	08 95       	ret
 766:	12 16       	cp	r1, r18
 768:	13 06       	cpc	r1, r19
 76a:	14 06       	cpc	r1, r20
 76c:	55 1f       	adc	r21, r21
 76e:	f2 cf       	rjmp	.-28     	; 0x754 <__fp_split3+0xe>
 770:	46 95       	lsr	r20
 772:	f1 df       	rcall	.-30     	; 0x756 <__fp_splitA>
 774:	08 c0       	rjmp	.+16     	; 0x786 <__fp_splitA+0x30>
 776:	16 16       	cp	r1, r22
 778:	17 06       	cpc	r1, r23
 77a:	18 06       	cpc	r1, r24
 77c:	99 1f       	adc	r25, r25
 77e:	f1 cf       	rjmp	.-30     	; 0x762 <__fp_splitA+0xc>
 780:	86 95       	lsr	r24
 782:	71 05       	cpc	r23, r1
 784:	61 05       	cpc	r22, r1
 786:	08 94       	sec
 788:	08 95       	ret

0000078a <__fp_zero>:
 78a:	e8 94       	clt

0000078c <__fp_szero>:
 78c:	bb 27       	eor	r27, r27
 78e:	66 27       	eor	r22, r22
 790:	77 27       	eor	r23, r23
 792:	cb 01       	movw	r24, r22
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__mulsf3>:
 798:	0e 94 df 03 	call	0x7be	; 0x7be <__mulsf3x>
 79c:	0c 94 92 03 	jmp	0x724	; 0x724 <__fp_round>
 7a0:	0e 94 84 03 	call	0x708	; 0x708 <__fp_pscA>
 7a4:	38 f0       	brcs	.+14     	; 0x7b4 <__mulsf3+0x1c>
 7a6:	0e 94 8b 03 	call	0x716	; 0x716 <__fp_pscB>
 7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__mulsf3+0x1c>
 7ac:	95 23       	and	r25, r21
 7ae:	11 f0       	breq	.+4      	; 0x7b4 <__mulsf3+0x1c>
 7b0:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>
 7b4:	0c 94 81 03 	jmp	0x702	; 0x702 <__fp_nan>
 7b8:	11 24       	eor	r1, r1
 7ba:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_szero>

000007be <__mulsf3x>:
 7be:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_split3>
 7c2:	70 f3       	brcs	.-36     	; 0x7a0 <__mulsf3+0x8>

000007c4 <__mulsf3_pse>:
 7c4:	95 9f       	mul	r25, r21
 7c6:	c1 f3       	breq	.-16     	; 0x7b8 <__mulsf3+0x20>
 7c8:	95 0f       	add	r25, r21
 7ca:	50 e0       	ldi	r21, 0x00	; 0
 7cc:	55 1f       	adc	r21, r21
 7ce:	62 9f       	mul	r22, r18
 7d0:	f0 01       	movw	r30, r0
 7d2:	72 9f       	mul	r23, r18
 7d4:	bb 27       	eor	r27, r27
 7d6:	f0 0d       	add	r31, r0
 7d8:	b1 1d       	adc	r27, r1
 7da:	63 9f       	mul	r22, r19
 7dc:	aa 27       	eor	r26, r26
 7de:	f0 0d       	add	r31, r0
 7e0:	b1 1d       	adc	r27, r1
 7e2:	aa 1f       	adc	r26, r26
 7e4:	64 9f       	mul	r22, r20
 7e6:	66 27       	eor	r22, r22
 7e8:	b0 0d       	add	r27, r0
 7ea:	a1 1d       	adc	r26, r1
 7ec:	66 1f       	adc	r22, r22
 7ee:	82 9f       	mul	r24, r18
 7f0:	22 27       	eor	r18, r18
 7f2:	b0 0d       	add	r27, r0
 7f4:	a1 1d       	adc	r26, r1
 7f6:	62 1f       	adc	r22, r18
 7f8:	73 9f       	mul	r23, r19
 7fa:	b0 0d       	add	r27, r0
 7fc:	a1 1d       	adc	r26, r1
 7fe:	62 1f       	adc	r22, r18
 800:	83 9f       	mul	r24, r19
 802:	a0 0d       	add	r26, r0
 804:	61 1d       	adc	r22, r1
 806:	22 1f       	adc	r18, r18
 808:	74 9f       	mul	r23, r20
 80a:	33 27       	eor	r19, r19
 80c:	a0 0d       	add	r26, r0
 80e:	61 1d       	adc	r22, r1
 810:	23 1f       	adc	r18, r19
 812:	84 9f       	mul	r24, r20
 814:	60 0d       	add	r22, r0
 816:	21 1d       	adc	r18, r1
 818:	82 2f       	mov	r24, r18
 81a:	76 2f       	mov	r23, r22
 81c:	6a 2f       	mov	r22, r26
 81e:	11 24       	eor	r1, r1
 820:	9f 57       	subi	r25, 0x7F	; 127
 822:	50 40       	sbci	r21, 0x00	; 0
 824:	9a f0       	brmi	.+38     	; 0x84c <__mulsf3_pse+0x88>
 826:	f1 f0       	breq	.+60     	; 0x864 <__mulsf3_pse+0xa0>
 828:	88 23       	and	r24, r24
 82a:	4a f0       	brmi	.+18     	; 0x83e <__mulsf3_pse+0x7a>
 82c:	ee 0f       	add	r30, r30
 82e:	ff 1f       	adc	r31, r31
 830:	bb 1f       	adc	r27, r27
 832:	66 1f       	adc	r22, r22
 834:	77 1f       	adc	r23, r23
 836:	88 1f       	adc	r24, r24
 838:	91 50       	subi	r25, 0x01	; 1
 83a:	50 40       	sbci	r21, 0x00	; 0
 83c:	a9 f7       	brne	.-22     	; 0x828 <__mulsf3_pse+0x64>
 83e:	9e 3f       	cpi	r25, 0xFE	; 254
 840:	51 05       	cpc	r21, r1
 842:	80 f0       	brcs	.+32     	; 0x864 <__mulsf3_pse+0xa0>
 844:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__fp_inf>
 848:	0c 94 c6 03 	jmp	0x78c	; 0x78c <__fp_szero>
 84c:	5f 3f       	cpi	r21, 0xFF	; 255
 84e:	e4 f3       	brlt	.-8      	; 0x848 <__mulsf3_pse+0x84>
 850:	98 3e       	cpi	r25, 0xE8	; 232
 852:	d4 f3       	brlt	.-12     	; 0x848 <__mulsf3_pse+0x84>
 854:	86 95       	lsr	r24
 856:	77 95       	ror	r23
 858:	67 95       	ror	r22
 85a:	b7 95       	ror	r27
 85c:	f7 95       	ror	r31
 85e:	e7 95       	ror	r30
 860:	9f 5f       	subi	r25, 0xFF	; 255
 862:	c1 f7       	brne	.-16     	; 0x854 <__mulsf3_pse+0x90>
 864:	fe 2b       	or	r31, r30
 866:	88 0f       	add	r24, r24
 868:	91 1d       	adc	r25, r1
 86a:	96 95       	lsr	r25
 86c:	87 95       	ror	r24
 86e:	97 f9       	bld	r25, 7
 870:	08 95       	ret

00000872 <__divmodhi4>:
 872:	97 fb       	bst	r25, 7
 874:	07 2e       	mov	r0, r23
 876:	16 f4       	brtc	.+4      	; 0x87c <__divmodhi4+0xa>
 878:	00 94       	com	r0
 87a:	07 d0       	rcall	.+14     	; 0x88a <__divmodhi4_neg1>
 87c:	77 fd       	sbrc	r23, 7
 87e:	09 d0       	rcall	.+18     	; 0x892 <__divmodhi4_neg2>
 880:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__udivmodhi4>
 884:	07 fc       	sbrc	r0, 7
 886:	05 d0       	rcall	.+10     	; 0x892 <__divmodhi4_neg2>
 888:	3e f4       	brtc	.+14     	; 0x898 <__divmodhi4_exit>

0000088a <__divmodhi4_neg1>:
 88a:	90 95       	com	r25
 88c:	81 95       	neg	r24
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	08 95       	ret

00000892 <__divmodhi4_neg2>:
 892:	70 95       	com	r23
 894:	61 95       	neg	r22
 896:	7f 4f       	sbci	r23, 0xFF	; 255

00000898 <__divmodhi4_exit>:
 898:	08 95       	ret

0000089a <__tablejump2__>:
 89a:	ee 0f       	add	r30, r30
 89c:	ff 1f       	adc	r31, r31
 89e:	05 90       	lpm	r0, Z+
 8a0:	f4 91       	lpm	r31, Z
 8a2:	e0 2d       	mov	r30, r0
 8a4:	09 94       	ijmp

000008a6 <__udivmodhi4>:
 8a6:	aa 1b       	sub	r26, r26
 8a8:	bb 1b       	sub	r27, r27
 8aa:	51 e1       	ldi	r21, 0x11	; 17
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <__udivmodhi4_ep>

000008ae <__udivmodhi4_loop>:
 8ae:	aa 1f       	adc	r26, r26
 8b0:	bb 1f       	adc	r27, r27
 8b2:	a6 17       	cp	r26, r22
 8b4:	b7 07       	cpc	r27, r23
 8b6:	10 f0       	brcs	.+4      	; 0x8bc <__udivmodhi4_ep>
 8b8:	a6 1b       	sub	r26, r22
 8ba:	b7 0b       	sbc	r27, r23

000008bc <__udivmodhi4_ep>:
 8bc:	88 1f       	adc	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	5a 95       	dec	r21
 8c2:	a9 f7       	brne	.-22     	; 0x8ae <__udivmodhi4_loop>
 8c4:	80 95       	com	r24
 8c6:	90 95       	com	r25
 8c8:	bc 01       	movw	r22, r24
 8ca:	cd 01       	movw	r24, r26
 8cc:	08 95       	ret

000008ce <_exit>:
 8ce:	f8 94       	cli

000008d0 <__stop_program>:
 8d0:	ff cf       	rjmp	.-2      	; 0x8d0 <__stop_program>
